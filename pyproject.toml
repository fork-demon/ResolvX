[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "golden-agent-framework"
version = "0.1.0"
description = "A pluggable, central-gateway-aware Golden Agent Framework for building and deploying AI agents"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "{ORG_NAME} Engineering Team", email = "engineering@{ORG_NAME}.com"}
]
keywords = ["ai", "agents", "langgraph", "mcp", "rag", "framework"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core framework
    "langgraph>=0.2.0",
    "langchain>=0.2.0",
    "langchain-core>=0.2.0",
    "langsmith>=0.1.0",
    "langfuse>=2.0.0",

    # Web framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",

    # Configuration and data handling
    "pyyaml>=6.0.1",
    "jinja2>=3.1.2",
    "httpx>=0.25.0",
    "aiofiles>=23.2.1",

    # Memory and storage
    "faiss-cpu>=1.7.4",
    "redis>=5.0.0",
    "pinecone-client>=3.0.0",

    # RAG backends
    "llama-index>=0.10.0",
    "llama-index-embeddings-openai>=0.1.0",
    "llama-index-vector-stores-faiss>=0.1.0",
    "chromadb>=0.4.0",

    # Observability and monitoring
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",

    # MCP and gateway integration
    "websockets>=12.0",
    "aiohttp>=3.9.0",
    "jsonrpc-base>=2.2.0",

    # Utilities
    "tenacity>=8.2.3",
    "schedule>=1.2.0",
    "click>=8.1.7",
    "rich>=13.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-bdd>=7.0.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-bdd>=7.0.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "respx>=0.20.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

all = [
    "golden-agent-framework[dev,test,docs]"
]

[project.urls]
Homepage = "https://github.com/{ORG_NAME}/golden-agent-framework"
Documentation = "https://docs.{ORG_NAME}.com/golden-agent-framework"
Repository = "https://github.com/{ORG_NAME}/golden-agent-framework"
Issues = "https://github.com/{ORG_NAME}/golden-agent-framework/issues"

[project.scripts]
golden-agent = "core.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["agents*", "core*", "extensions*"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
select = ["E", "F", "I", "N", "UP", "S", "B", "A", "C4", "ICN", "PIE", "PYI", "RSE", "RET", "SIM", "ARG", "PTH", "ERA", "PL", "PERF"]
ignore = ["E501", "S101", "PLR0913", "PLR0912", "PLR0915"]
line-length = 88
target-version = "py310"

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ARG"]
"*/__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "pinecone.*",
    "redis.*",
    "chromadb.*",
    "llama_index.*",
    "langgraph.*",
    "langsmith.*",
    "langfuse.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=core",
    "--cov=agents",
    "--cov=extensions",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "bdd: marks tests as BDD feature tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["core", "agents", "extensions"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]