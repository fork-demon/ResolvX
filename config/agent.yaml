# Golden Agent Framework Configuration
# This file contains the main configuration for all agents and framework components.
# Variables in {BRACKETS} are automatically substituted from environment variables.

# Framework metadata
version: "0.1.0"
environment: "local"
debug: true

# Memory configuration - FAISS vector memory backend
memory:
  backend: "faiss"

  faiss:
    index_path: "./data/faiss_index"
    embedding_model: "{DEFAULT_EMBEDDING_MODEL}"
    dimension: null  # Auto-detect from embeddings (384 for all-MiniLM-L6-v2, 1536 for OpenAI)
    index_type: "IndexFlatIP"  # Inner Product = Cosine Similarity for normalized embeddings
    metric: "IP"

# Observability configuration - pluggable monitoring system
observability:
  backend: "langfuse"  # Options: langsmith, langfuse, console

  langsmith:
    api_url: "https://api.smith.langchain.com"
    api_key: "{LANGSMITH_API_KEY}"
    project_name: "{ORG_NAME}-agents"
    environment: "{ENVIRONMENT}"
    enabled: false

  langfuse:
    public_key: "{LANGFUSE_PUBLIC_KEY}"
    secret_key: "{LANGFUSE_SECRET_KEY}"
    host: "{LANGFUSE_HOST}"
    project_name: "{ORG_NAME}-agents"
    environment: "{ENVIRONMENT}"
    enabled: true

  console:
    level: "INFO"
    format: "structured"
    include_timestamps: true

# RAG (Retrieval Augmented Generation) configuration
# Supports three backends:
# 1. faiss_kb: FAISS-based local KB (RECOMMENDED - fast, persistent, production-ready)
# 2. global_rag: Global RAG service (API mode for centralized KB or local mode for hybrid)
# 3. local_kb: Simple local KB (DEPRECATED - use faiss_kb instead)
rag:
  backend: "faiss_kb"  # Options: faiss_kb (recommended), global_rag, local_kb (deprecated)
  knowledge_dir: "kb"
  model_name: "all-MiniLM-L6-v2"
  
  # Backend-specific configuration
  config:
    # FAISS KB config (used when backend=faiss_kb)
    index_path: "./data/faiss_kb_index"
    dimension: 384  # all-MiniLM-L6-v2
    index_type: "IndexFlatIP"  # Inner Product for cosine similarity
    
    # Global RAG config (used when backend=global_rag)
    mode: "local"  # Options: "local" (index local files), "api" (use external RAG service)
    api_url: null  # Set to your RAG API URL when mode=api (e.g., "https://rag-service.company.com/api/v1")
    api_key: null  # Set to your API key when mode=api (or use env var: RAG_API_KEY)

# Runbook configuration - team-specific runbook management
# runbooks removed in minimal repo

# SharePoint configuration - business CSV file uploads
sharepoint:
  # Folder paths for CSV file processing
  folders:
    process: "{SHAREPOINT_PROCESS_FOLDER}"  # Where business users upload CSV files
    archive: "{SHAREPOINT_ARCHIVE_FOLDER}"  # Where processed CSV files are moved
  
  # Authentication
  auth:
    tenant_id: "{SHAREPOINT_TENANT_ID}"
    client_id: "{SHAREPOINT_CLIENT_ID}"
    client_secret: "{SHAREPOINT_CLIENT_SECRET}"
  
  # Site configuration
  site_url: "{SHAREPOINT_SITE_URL}"
  
  # File processing settings
  file_types:
    - "competitor_promotional"  # Competitor promotional prices CSV
    - "basket_segment"          # Basket segment data CSV
    - "competitor_prices"       # Regular competitor prices CSV

# Gateway configuration for MCP and LLM integration
gateway:
  # MCP (Model Context Protocol) Gateway - Primary
  # Central Gateway: Operational tools (Zendesk, Splunk, New Relic, Memory)
  mcp_gateway:
    url: "{CENTRAL_MCP_GATEWAY_URL}"  # Default: http://localhost:8083
    timeout: 30
    retry_attempts: 3
    retry_delay: 1.0
  
  # Additional MCP Gateways (Multi-Gateway Support)
  # Demonstrates real multi-gateway architecture with different tools per gateway
  additional_mcp_gateways:
    # Price Team Gateway - Provides Price API, Product API, Location API, Competitor data
    # Calls price_api backend (port 8080) for realistic pricing data
    pricing_team:
      url: "http://localhost:8082"
      timeout: 30
      retry_attempts: 3
      enabled: true
      description: "Price Intelligence Team tools - pricing, product, location, competitor data"

  # LLM Gateway
  llm_gateway:
    url: "{CENTRAL_LLM_GATEWAY_URL}"
    default_model: "llama3.2"
    timeout: 60
    retry_attempts: 2

  # Tool registry - maps tool names to their implementations
  tools:
    # MCP-based tools (via central gateway)
    splunk_search:
      type: "mcp"
      server: "splunk-mcp-server"
      description: "Search Splunk logs and metrics"

    zendesk_ticket_create:
      type: "mcp"
      server: "zendesk-mcp-server"
      description: "Create and manage Zendesk tickets"

    newrelic_metrics:
      type: "mcp"
      server: "newrelic-mcp-server"
      description: "Query New Relic metrics and alerts"

    vault_secret_read:
      type: "mcp"
      server: "vault-mcp-server"
      description: "Read secrets from HashiCorp Vault"

    # Custom tools (mapped via MCP mock gateway for demo parity)
    product_lookup:
      type: "mcp"
      server: "mock-mcp-gateway"
      description: "Lookup product by GTIN/TPNB"

    location_lookup:
      type: "mcp"
      server: "mock-mcp-gateway"
      description: "Resolve location cluster to stores"

    # Price API tools via MCP (mock gateway in local compose)
    # Price API tools via centralized MCP (mock gateway in local compose)
    price_minimum_calculate: { type: "mcp", server: "mock-mcp-gateway", description: "Calculate minimum price for GTIN across clusters" }
    price_minimum_get: { type: "mcp", server: "mock-mcp-gateway", description: "Get minimum price for GTIN and cluster" }
    basket_segment_get: { type: "mcp", server: "mock-mcp-gateway", description: "Get basket segment for TPNB, cluster, subclass" }
    competitor_prices_get: { type: "mcp", server: "mock-mcp-gateway", description: "Get competitor prices for TPNB across clusters" }
    competitor_promotional_prices_get: { type: "mcp", server: "mock-mcp-gateway", description: "Get competitor promo prices for TPNBs across clusters" }
    promo_effectiveness_get: { type: "mcp", server: "mock-mcp-gateway", description: "Get promotion effectiveness for TPNBs across clusters" }
    policies_view: { type: "mcp", server: "mock-mcp-gateway", description: "View pricing policies for clusters and classifications" }
    base_prices_get: { type: "mcp", server: "mock-mcp-gateway", description: "Get base price for TPNB at cluster and effective date" }

    # Optional local mocks removed; using MCP mock gateway uniformly

# Agent configurations - each agent has its own settings
agents:
  # Triage Agent - intelligently routes and prioritizes tasks
  triage:
    enabled: true
    model: "{CENTRAL_LLM_GATEWAY_URL}/v1/chat/completions"
    type: "triage"
    description: "Intelligently routes and prioritizes tasks"
    team: "operations"

    # Evaluation configuration - Guardrails, hallucination detection, quality assessment
    guardrails:
      enable_pii_detection: true
      enable_safety_checks: true
      enable_policy_enforcement: true
      require_human_approval: false
      pii_patterns:
        - "email"
        - "phone"
        - "ssn"
        - "credit_card"
      safety_patterns:
        - "malicious"
        - "harmful"
        - "inappropriate"
    
    hallucination:
      enable_fact_checking: true
      enable_consistency_checks: true
      knowledge_base_threshold: 0.8
      cross_reference_sources: true
    
    quality:
      enable_quality_assessment: true
      expected_quality: "high"
      performance_tracking: true
      user_feedback_integration: true

    # Prompt configuration - Core to agent behavior
    prompts:
      system_prompt:
        type: "file"
        path: "prompts/triage/system_prompt.md"
        variables:
          ORG_NAME: "{ORG_NAME}"
          ENVIRONMENT: "{ENVIRONMENT}"
      
      runtime_prompts:
        incident_analysis:
          type: "file"
          path: "prompts/triage/incident_analysis.md"
          variables:
            ORG_NAME: "{ORG_NAME}"
        
        routing_decision:
          type: "file"
          path: "prompts/triage/routing_decision.md"
          variables:
            ORG_NAME: "{ORG_NAME}"
        
        escalation_check:
          type: "file"
          path: "prompts/triage/escalation_check.md"
          variables:
            ORG_NAME: "{ORG_NAME}"

    # Resource ingestion configuration (minimal)
    # Note: Glossary and incident types are now loaded directly at agent initialization
    # from kb/domain/ directory, not via RAG search. RAG is used only for runbooks in kb/
    resources:
      knowledge_base:
        - type: "file"
          path: "kb/domain/incident_types.md"
          description: "Incident type definitions (loaded at startup, not via RAG)"
        - type: "file"
          path: "kb/domain/glossary.md"
          description: "Business domain glossary (loaded at startup, not via RAG)"

    # Optional per-agent MCP override (e.g., internal team MCP server)
    # mcp_gateway:
    #   url: "http://localhost:9091"

    tools:
      - splunk_search
      - zendesk_ticket_create
      - newrelic_metrics
      - product_lookup
      - location_lookup
      - price_minimum_get
      - base_prices_get
      - basket_segment_get
      - competitor_prices_get
      - competitor_promotional_prices_get
      - promo_effectiveness_get

    confidence_threshold: 0.8
    max_iterations: 5
    timeout: 120

  # Poller Agent - monitors systems and endpoints on schedule
  poller:
    enabled: true
    model: "{CENTRAL_LLM_GATEWAY_URL}/v1/chat/completions"
    type: "poller"
    description: "Zendesk queue poller for monitoring and processing tickets"
    team: "operations"
    
    # Scheduler: run every 30 minutes (cron format: minute hour day month weekday)
    schedule: "*/30 * * * *"
    
    # Poller settings
    max_concurrent_polls: 5
    default_poll_interval: 30
    max_results_history: 1000
    auto_assign_enabled: false
    
    # Zendesk configuration: single team, multiple queues
    zendesk:
      auth:
        # Choose one: email+api_token OR username+password. subdomain optional.
        email: "{ZENDESK_SERVICE_EMAIL}"
        api_token: "{ZENDESK_API_TOKEN}"
        # username: "{ZENDESK_USERNAME}"
        # password: "{ZENDESK_PASSWORD}"
        # subdomain: "{ZENDESK_SUBDOMAIN}"
        # base_url: "{ZENDESK_BASE_URL}"
      queues:
        - name: "engineering-support"
          poll_interval: 30
          max_tickets_per_poll: 50
          priority_threshold: "normal"
          auto_assign: false
          tags: ["poller-processed", "engineering"]
        - name: "devops-support"
          poll_interval: 45
          max_tickets_per_poll: 30
          priority_threshold: "normal"
          auto_assign: true
          assignee_id: "{ZENDESK_DEVOPS_ASSIGNEE_ID}"
          tags: ["poller-processed", "devops"]
        - name: "security-incidents"
          poll_interval: 15
          max_tickets_per_poll: 20
          priority_threshold: "low"
          auto_assign: true
          assignee_id: "{ZENDESK_SECURITY_ASSIGNEE_ID}"
          tags: ["poller-processed", "security", "incident"]
        - name: "operations-support"
          poll_interval: 60
          max_tickets_per_poll: 100
          priority_threshold: "normal"
          auto_assign: false
          tags: ["poller-processed", "operations"]

    # Prompt configuration - Minimal poll-and-forward
    prompts:
      system_prompt:
        type: "file"
        path: "prompts/poller/system_prompt.md"
        variables:
          ORG_NAME: "{ORG_NAME}"
          ENVIRONMENT: "{ENVIRONMENT}"

    # No resources for minimal poller

    # Optional per-agent MCP override
    # mcp_gateway:
    #   url: "http://localhost:9092"

    tools:
      - poll_queue
      - get_queue_stats

    confidence_threshold: 0.9
    max_iterations: 3
    timeout: 60

    # Poller-specific settings
    custom_settings: {}

  # Metrics Agent - collects and analyzes performance metrics
  # Memory Agent - historical ticket lookup and insertion
  memory:
    enabled: true
    type: "memory"
    description: "Search historical tickets and forward related to supervisor; else store"
    team: "operations"

    # Behavior
    namespace_prefix: "tickets"
    search_limit: 10
    search_threshold: 0.9  # 90% similarity for duplicate detection
    duplicate_threshold: 0.95  # 95% similarity for exact duplicates
    forward_mode: "return"  # or "invoke"
    embedding_model: "all-MiniLM-L6-v2"  # optional; falls back to text similarity if unavailable

    prompts:
      system_prompt:
        type: "file"
        path: "prompts/memory/system_prompt.md"
        variables:
          ORG_NAME: "{ORG_NAME}"
          ENVIRONMENT: "{ENVIRONMENT}"

 
  supervisor:
    enabled: true
    model: "{CENTRAL_LLM_GATEWAY_URL}/v1/chat/completions"
    type: "supervisor"
    description: "Orchestrates multi-agent workflows"
    team: "operations"

    # Prompt configuration - Core to agent behavior
    prompts:
      system_prompt:
        type: "file"
        path: "prompts/supervisor/system_prompt.md"
        variables:
          ORG_NAME: "{ORG_NAME}"
          ENVIRONMENT: "{ENVIRONMENT}"
      
      runtime_prompts:
        task_coordination:
          type: "file"
          path: "prompts/supervisor/task_coordination.md"
          variables:
            ORG_NAME: "{ORG_NAME}"
        
        escalation:
          type: "file"
          path: "prompts/supervisor/escalation.md"
          variables:
            ORG_NAME: "{ORG_NAME}"
        
        conflict_resolution:
          type: "file"
          path: "prompts/supervisor/conflict_resolution.md"
          variables:
            ORG_NAME: "{ORG_NAME}"

    # Resource ingestion configuration
    resources:
      knowledge_base:
        - type: "file"
          path: "resources/supervisor/agent_capabilities.yaml"
          description: "Agent capabilities and specializations"
        - type: "file"
          path: "resources/supervisor/workflow_templates.yaml"
          description: "Common workflow templates and patterns"
        - type: "url"
          url: "https://docs.{ORG_NAME}.com/agent-orchestration"
          description: "Agent orchestration documentation"
      
      templates:
        - type: "file"
          path: "resources/supervisor/templates/task_breakdown.md"
          description: "Task breakdown template"
        - type: "file"
          path: "resources/supervisor/templates/escalation_report.md"
          description: "Escalation report template"


    tools:
      - splunk_search
      - zendesk_ticket_create
      - newrelic_metrics
      - vault_secret_read

    confidence_threshold: 0.9
    max_iterations: 10
    timeout: 300

# Global settings that apply across all agents

  # runbook agent removed in minimal repo

global_settings:
  # Default model settings
  default_temperature: 0.1
  default_max_tokens: 2048

  # Retry and timeout settings
  default_retry_attempts: 3
  default_retry_delay: 1.0
  default_timeout: 120

  # Rate limiting
  max_requests_per_minute: 60
  max_concurrent_requests: 10

  # Security settings
  enable_audit_logging: true
  mask_sensitive_data: true

  # Performance settings
  enable_caching: true
  cache_ttl: 300

  # Development settings
  enable_debug_mode: true
  log_level: "INFO"